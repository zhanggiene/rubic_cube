//
//  fragmentShader.c
//  second
//
//  Created by Zhang Zhuyan on 16/6/19.
//  Copyright Â© 2019 Zhang Zhuyan. All rights reserved.
//

#version 330 core

out vec4 FragColor;

struct Material {
vec3 ambient;
vec3 diffuse;
vec3 specular;
float shininess;
};

in vec3 FragPos;
in vec3 Normal;

uniform vec3 lightPos;
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 cameraPosition;
uniform Material material;

void main()
{
vec3 ambient = lightColor * material.ambient;




// diffuse
vec3 norm = normalize(Normal);
vec3 lightDir = normalize(lightPos - FragPos);
float diff = max(dot(norm, lightDir), 0.0);
vec3 diffuse = lightColor * (diff * material.diffuse);


float specularStrength=0.5;
vec3 viewDir = normalize(cameraPosition - FragPos);
vec3 reflectDir = reflect(-lightDir, norm);

float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess*128);
vec3 specular = lightColor * (spec * material.specular);

vec3 result = ambient + diffuse + specular;
FragColor = vec4(result, 1.0);

}
